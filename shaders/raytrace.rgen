#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_ARB_shader_clock: enable

#include "random.glsl"
#include "raycommon.glsl"

layout(push_constant) uniform _PushConstantRay {PushConstantRay pcRay;};
layout(binding = 0, set = 0) uniform accelerationStructureEXT tlas;
layout(binding = 1, set = 0, rgba32f) uniform image2D image;

layout(binding = 0, set = 1) uniform UniformBufferObject{
    mat4 model;
    mat4 view;
    mat4 proj;
} ubo;

layout(location = 0) rayPayloadEXT HitPayload hitPayload;

const int MAX_SAMPLES = 10;
const int MAX_RAY_DEPTH = 20;

void main() 
{
    // Initialize the random number
    uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockARB()));
        
    vec3 accumHitValue = vec3(0);

    // Note that total samples = MAX_RT_FRAMES (in main.cpp) * MAX_SAMPLES
    for (int i = 0; i < MAX_SAMPLES; ++i) {
        float r1 = rnd(seed);
        float r2 = rnd(seed);
        // Subpixel jitter: send the ray through a different position inside the pixel
        // each time, to provide anti-aliasing.
        vec2 subpixel_jitter = pcRay.frame == 0 ? vec2(0.5f, 0.5f) : vec2(r1, r2);

        const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + subpixel_jitter;
        const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
        vec2 d = inUV * 2.0 - 1.0;

        vec4 origin = inverse(ubo.view) * vec4(vec3(0.0), 1.0);
        vec4 target = inverse(ubo.proj) * vec4(d.x, d.y, 1.0, 1.0);
        vec4 direction = inverse(ubo.view) * vec4(normalize(target.xyz), 0.0);

        // Will not call the any hit shader, so all objects will be opaque
        uint rayFlags = gl_RayFlagsOpaqueEXT;

        float tMin = 0.001;
        float tMax = 10000.0;

        hitPayload.hitValue = vec3(0.0);
        hitPayload.rayOrigin = origin.xyz;
        hitPayload.rayDirection = direction.xyz;
        hitPayload.emission = vec3(0.0);
        hitPayload.seed = seed;
        hitPayload.depth = 0;

        vec3 accumDepthHitValue = vec3(0.0);
        vec3 curAttenuation = vec3(1.0);

        for (;hitPayload.depth < MAX_RAY_DEPTH; hitPayload.depth++) {
            traceRayEXT(tlas,                  // acceleration structure
                        rayFlags,              // rayFlags
                        0xFF,                  // cullMask
                        0,                     // sbtRecordOffset
                        0,                     // sbtRecordStride
                        0,                     // missIndex
                        hitPayload.rayOrigin,     // ray origin
                        tMin,                  // ray min range
                        hitPayload.rayDirection,  // ray direction
                        tMax,                  // ray max range
                        0                      // hitPayload (location = 0)
            );

            accumDepthHitValue += hitPayload.emission * curAttenuation;
            curAttenuation *= hitPayload.hitValue;
        }

        accumHitValue += accumDepthHitValue;
    }
    
    hitPayload.hitValue = accumHitValue / MAX_SAMPLES;

    // Accumulate color over frames
    if (pcRay.frame > 0) {
        float a = 1.0f / float(pcRay.frame + 1);
        vec3 old_color = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_color, hitPayload.hitValue, a), 1.0f));
    } else {
        // First frame, replace the value in the buffer
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitPayload.hitValue, 1.0));
    }
}
